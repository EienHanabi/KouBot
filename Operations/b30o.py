from Arcapi import SyncApi
from PIL import Image, ImageFilter, ImageDraw, ImageFont

difficulty = ['PST', 'PRS', 'FTR', 'BYD']
clear_type_short = ['F', 'NC', 'FR', 'PM', 'EC', 'HC']
cover = 'http://119.23.30.103:8080/ArcAssets/cover/'
ava = 'http://119.23.30.103:8080/ArcAssets/icon/'


def margin_text(draw, x, y, text, font, shadowcolor):
    # thin border
    draw.text((x - 1, y), text, font=font, fill=shadowcolor)
    draw.text((x + 1, y), text, font=font, fill=shadowcolor)
    draw.text((x, y - 1), text, font=font, fill=shadowcolor)
    draw.text((x, y + 1), text, font=font, fill=shadowcolor)

    # thicker border
    draw.text((x - 1, y - 1), text, font=font, fill=shadowcolor)
    draw.text((x + 1, y - 1), text, font=font, fill=shadowcolor)
    draw.text((x - 1, y + 1), text, font=font, fill=shadowcolor)
    draw.text((x + 1, y + 1), text, font=font, fill=shadowcolor)

    draw.text((x, y), text, fill='#FFFFFF', font=font)


def add_stat(im, x, y, i, song_info, best_30):
    song_name_cut = song_info[best_30[i]['song_id']]['en']
    if len(song_name_cut) > 10:
        song_name_cut = song_name_cut[0:10] + '..'
    text = '#' + str(i + 1) + ' ' + song_name_cut + '[' + str(
        difficulty[best_30[i]['difficulty']]) + ']\n\n\n PTT:' + str(best_30[i]['rating'])[0:5] + '    F:' + str(
        best_30[i]['near_count']) + ' L:' + str(best_30[i]['miss_count'])
    draw = ImageDraw.Draw(im)
    font = ImageFont.truetype("Exo-Medium.ttf", 24)
    shadowcolor = 'black'
    margin_text(draw, x, y, text, font, shadowcolor)

    temp_image = Image.open('ArcAssets/cover/' + best_30[i]['song_id'] + '.jpg')
    temp_image = temp_image.resize((120, 120))
    im.paste(temp_image, (x - 128, y))

    text = str(best_30[i]['score']) + ' (' + clear_type_short[best_30[i]['clear_type']] + ')'
    font = ImageFont.truetype("Exo-Medium.ttf", 32)
    x += 15
    y += 37
    margin_text(draw, x, y, text, font, shadowcolor)

def cal_rating(constant, score):
    if(score >= 10000000):
        modifier = 2
    elif(score >= 9950000):
        modifier = (score - 9950000) / 100000 + 1.5
    elif(score >= 9800000):
        modifier = (score - 9800000) / 400000 + 1
    else:
        modifier = (score - 9500000) / 300000

    if (constant + modifier < 0):
        return 0
    else:
        return constant + modifier

def b30o(usercode):
    api_ = SyncApi(user_code=usercode)
    arraybuffer = api_.scores(start=8, end=12)
    personal_info = arraybuffer[1]
    song_info = arraybuffer[0]
    best_info = []
    for i in range(len(arraybuffer)):
        if i > 1:
            best_info.append(arraybuffer[i])
    for i in best_info:
        i['rating'] = cal_rating(i['constant'], i['score'])
    best_info.sort(key=lambda info: info['rating'], reverse=True)
    best_30 = best_info[0:30]
    b30 = 0
    for i in best_30:
        b30 += i['rating']
    b30 = b30 / 30

    image = Image.open('background-darken.jpg')

    for i in range(5):
        image = image.filter(ImageFilter.GaussianBlur)
    for n in range(10):
        for m in range(3):
            add_stat(image, 165 + 400 * m, 60 + 142 * n, n * 3 + m, song_info, best_30)

    user_x = 825
    user_y = 1500

    temp_image = Image.open('ArcAssets/images/icon_shadow.png')
    temp_image = temp_image.resize((100, 100))
    image.paste(temp_image, (user_x, user_y), mask=temp_image)

    if personal_info['rating'] / 100 < 3.5:
        rating_div = 0
    elif personal_info['rating'] / 100 < 7:
        rating_div = 1
    elif personal_info['rating'] / 100 < 10:
        rating_div = 2
    elif personal_info['rating'] / 100 < 11:
        rating_div = 3
    elif personal_info['rating'] / 100 < 12:
        rating_div = 4
    elif personal_info['rating'] / 100 < 12.5:
        rating_div = 5
    else:
        rating_div = 6
    temp_image = Image.open('ArcAssets/images/rating_' + str(rating_div) + '.png')
    temp_image = temp_image.resize((100, 100))
    image.paste(temp_image, (user_x, user_y), mask=temp_image)

    user_x += 14
    user_y += 28

    draw = ImageDraw.Draw(image)
    text = str("%.2f" % b30)
    font = ImageFont.truetype("Exo-Medium.ttf", 33)
    shadowcolor = 'black'
    margin_text(draw, user_x, user_y, text, font, shadowcolor)

    user_x += 100
    user_y -= 13
    text = personal_info['name']
    font = ImageFont.truetype("Exo-Medium.ttf", 50)
    margin_text(draw, user_x, user_y, text, font, shadowcolor)

    user_y += 65
    text = 'Best 30: ' + str(b30)[0:6] + '\nRecent 10: Unavailable' + '\n\nGenerated by Kou Bot'
    font = ImageFont.truetype("Exo-Medium.ttf", 25)
    margin_text(draw, user_x, user_y, text, font, shadowcolor)

    return image
