import requests
import json
from PIL import Image, ImageFilter, ImageDraw, ImageFont

difficulty = ['PST', 'PRS', 'FTR', 'BYD']
clear_type_short = ['F', 'NC', 'FR', 'PM', 'EC', 'HC']


def query_songname(songid):
    with open("ArcSongList.json", 'r', encoding='utf-8') as load_f:
        dict = json.load(load_f)
    for i in dict['songs']:
        if i['id'] == songid:
            return i['title_localized']['en']


def margin_text(draw, x, y, text, font, shadowcolor):
    # thin border
    draw.text((x - 1, y), text, font=font, fill=shadowcolor)
    draw.text((x + 1, y), text, font=font, fill=shadowcolor)
    draw.text((x, y - 1), text, font=font, fill=shadowcolor)
    draw.text((x, y + 1), text, font=font, fill=shadowcolor)

    # thicker border
    draw.text((x - 1, y - 1), text, font=font, fill=shadowcolor)
    draw.text((x + 1, y - 1), text, font=font, fill=shadowcolor)
    draw.text((x - 1, y + 1), text, font=font, fill=shadowcolor)
    draw.text((x + 1, y + 1), text, font=font, fill=shadowcolor)

    draw.text((x, y), text, fill='#FFFFFF', font=font)


def add_stat(im, x, y, i, best_30):
    song_name_cut = query_songname(best_30[i]['song_id'])
    if len(song_name_cut) > 10:
        song_name_cut = song_name_cut[0:10] + '..'
    text = '#' + str(i + 1) + ' ' + song_name_cut + '[' + str(
        difficulty[best_30[i]['difficulty']]) + ']\n\n\n PTT:' + str(best_30[i]['rating'])[0:5] + '    F:' + str(
        best_30[i]['near_count']) + ' L:' + str(best_30[i]['miss_count'])
    draw = ImageDraw.Draw(im)
    font = ImageFont.truetype("Exo-Medium.ttf", 24)
    shadowcolor = 'black'
    margin_text(draw, x, y, text, font, shadowcolor)

    temp_image = Image.open('ArcAssets/cover/' + best_30[i]['song_id'] + '.jpg')
    temp_image = temp_image.resize((120, 120))
    im.paste(temp_image, (x - 128, y))

    text = str(best_30[i]['score']) + ' (' + clear_type_short[best_30[i]['clear_type']] + ')'
    font = ImageFont.truetype("Exo-Medium.ttf", 32)
    x += 15
    y += 37
    margin_text(draw, x, y, text, font, shadowcolor)


def b30(usercode):
    # contact botarcapi for address and UA
    headers = {"User-Agent": "InsertYourAgentHere"}
    response_best30_json = requests.post("see BotArcApi wiki" + usercode,
                                         headers=headers)

    response_best30 = response_best30_json.json()
    if response_best30['status'] != 0:
        return response_best30['status'], response_best30['message']

    # contact botarcapi for address
    response_userinfo_json = requests.post("see BotArcApi wiki" + usercode + "&recent=1",
                                           headers=headers)

    response_userinfo = response_userinfo_json.json()
    if response_userinfo['status'] != 0:
        return response_userinfo['status'], response_userinfo['message']

    image = Image.open('background-darken.jpg')

    for i in range(5):
        image = image.filter(ImageFilter.GaussianBlur)
    for n in range(10):
        for m in range(3):
            add_stat(image, 165 + 400 * m, 60 + 142 * n, n * 3 + m, response_best30['content']['best30_list'])

    user_x = 825
    user_y = 1500

    temp_image = Image.open('ArcAssets/images/icon_shadow.png')
    temp_image = temp_image.resize((100, 100))
    image.paste(temp_image, (user_x, user_y), mask=temp_image)

    b30 = response_best30['content']['best30_avg']
    r10 = response_best30['content']['recent10_avg']
    rating = (b30 * 3 + r10) / 4

    if rating < 3.5:
        rating_div = 0
    elif rating < 7:
        rating_div = 1
    elif rating < 10:
        rating_div = 2
    elif rating < 11:
        rating_div = 3
    elif rating < 12:
        rating_div = 4
    elif rating < 12.5:
        rating_div = 5
    else:
        rating_div = 6
    temp_image = Image.open('ArcAssets/images/rating_' + str(rating_div) + '.png')
    temp_image = temp_image.resize((100, 100))
    image.paste(temp_image, (user_x, user_y), mask=temp_image)

    user_x += 14
    user_y += 28

    draw = ImageDraw.Draw(image)
    text = str("%.2f" % (rating))
    font = ImageFont.truetype("Exo-Medium.ttf", 33)
    shadowcolor = 'black'
    margin_text(draw, user_x, user_y, text, font, shadowcolor)

    user_x += 100
    user_y -= 13
    text = response_userinfo['content']['name']
    font = ImageFont.truetype("Exo-Medium.ttf", 50)
    margin_text(draw, user_x, user_y, text, font, shadowcolor)

    user_y += 65
    text = 'Best 30: ' + str(b30)[0:6] + '\nRecent 10: ' + str(r10)[0:6] + '\n\nGenerated by Kou Bot'
    font = ImageFont.truetype("Exo-Medium.ttf", 25)
    margin_text(draw, user_x, user_y, text, font, shadowcolor)

    return 0, image
